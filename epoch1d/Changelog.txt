25-07-2012 Changes for version 4.0

Additions and changes:

 * Added Sentoku and Kemp collision routine.
   This adds a new output block named "collisions" which accepts the
   following three parameters.

     use_collisions - This is a logical flag which determines whether or not
                      to call the collision routine.
                      If omitted, the default is "true" if any of the
                      frequency factors are non-zero (see below) and "false"
                      otherwise.

     coulomb_log - This may either be set to a real value, specifying the
                   Coulomb logarithm to use when scattering the particles
                   or to the special value "auto". If "auto" is used then
                   the routine will calculate a value based on the properties
                   of the two particles being scattered.
                   If omitted, the default value is "auto".

     collide - This sets up a symmetric square matrix of size nspecies*nspecies
               containing the collision frequency factors to use between
               particle species. The element (s1,s2) gives the frequency
               factor used when colliding species s1 with species s2.
               If the factor is less than zero, no collisions are performed.
               If it is equal to one, collisions are performed normally.
               For any value between zero and one, the collisions are performed
               using a frequency multiplied by the given factor.
               If "collide" has a value of "all" then all elements of the
               matrix are set to one. If it has a value of "none" then all
               elements are set to minus one.
               If the syntax "species1 species2 <value>" is used, then the
               (species1,species2) element of the matrix is set to
               the factor "<value>". This may either be a real number, or
               the special value "on" or "off". The "collide" parameter may
               be used multiple times.
               The default value is "all" (ie. all elements of the matrix
               are set to one).

     For example:

       begin:collisions
         use_collisions = T
         coulomb_log = auto
         collide = all
         collide = spec1 spec2 off
         collide = spec2 spec3 0.1
       end:collisions

     With this block, collisions are turned on and the Coulomb logarithm is
     automatically calculated. All values of the frequency array are set
     to one except (spec1,spec2) is set to minus one (and also (spec2,spec1))
     and (spec2,spec3) is set to 0.1

 * Added QED pair production as described in Duclous et al. PPCF 53 (2011)
   It is enabled using the compiler flag "-DPHOTONS". Additionally,
   the Trident process is enabled using "-DTRIDENT_PHOTONS".

   A new input deck block named "qed" has been added which accepts the
   following parameters:

     use_qed - Logical flag which turns QED on or off. The default is "F".

     qed_start_time - Floating point value specifying the time after which QED
                      effects should be turned on. The default is 0.

     produce_photons - Logical flag which specifies whether to track the
                       photons generated by synchrotron emission. If this
                       is "F" then the radiation reaction force is calculated
                       but the properties of the emitted photons are not
                       tracked. The default is "F".

     photon_energy_min - Minimum energy of produced photons. Radiation
                         reaction is calculated for photons of all energies,
                         but photons with energy below this cutoff are not
                         tracked.  The default is 0.

     photon_dynamics - Logical flag which specifies whether to push photons.
                       If "F" then photons are generated, but their motion
                       through the domain is not simulated and they stay where
                       they were generated. The default is "F".

     produce_pairs - Logical flag which determines whether or not to simulate
                     the process of pair generation from gamma ray photons.
                     Both produce_photons and photon_dynamics must be "T" for
                     this to work. The default is "F".

     qed_table_location - EPOCH's QED routines use lookup tables to calculate
                          gamma ray emission and pair production. If you want
                          to use tables in a different location from the
                          default, specify the new location using this
                          parameter.
                          The default is "src/physics_packages/TABLES".

   QED also requires that the code now know which species are electrons,
   positrons and photons. The species type is specified using a single
   "identify" tag in a species block. To specify an electron the block in the
   deck would look like

     begin:species
       name = electron
       frac = 0.5
       rho = 7.7e29
       identify:electron
     end:species

   Once the identity of a species is set then the code automatically assigns
   mass and charge states for the species.
   Possible identities are:

     electron - A normal electron species. All species of electrons in the
                simulation must be identified in this way or they will not
                generate photons.

     positron - A normal positron species. All species of positron in the
                simulation must be identified in this way or they will not
                generate photons.

     photon   - A normal photon species. One species of this type is needed
                for photon production to work. If multiple species are present
                then generated photons will appear in the first species of
                this type.

     bw_electron - The electron species for pair production by the
                   Breit-Wheeler process. If a species of this type exists
                   then electrons from the pair production module will be
                   created in this species. If no species of this type is
                   specified then pair electrons will be generated in the
                   first electron species.

     bw_positron - As above but for positrons.

     trident_electron - The electron species for pair production by the
                        Trident process. If a species of this type exists then
                        electrons from the pair production module will be
                        created in this species. If no species of this type is
                        specified then pair electrons will be generated in the
                        first electron species.

     trident_positron - As above but for positrons.

     proton - A normal proton species. This is for convenience only and is not
              required by the pair production routines.

   A species should be identified only once, so a "bw_electron" species does
   not need to also be identified as an "electron" species. If the code is
   running with "produce_photons=T" then a photon species must be created by
   user and identified. If the code is running with "produce_pairs=T" then the
   code must specify at least one electron (or bw_electron) species and one
   positron (or bw_positron) species. The code will fail to run if the needed
   species are not specified.

 * Added Alistair Lawrence-Douglas's ionisation routines.
   This adds the following two parameters to the input deck control block:

     use_multiphoton - Logical flag which turns on modelling ionisation by
                       multiple photon absorption. This should be set to "F"
                       if there is no laser attached to a boundary as it
                       relies on laser frequency. The default is "T".

     use_bsi - Logical flag which turns on barrier suppression ionisation
               correction to the tunneling ionisation model for high intensity
               lasers. The default is "T".

   Also two additional parameters to the species block:

     ionisation_energies - When specified, this turns on ionisation modeling.
                           This is an array of ionisation energies starting
                           from the outermost shell. This expects to be given
                           all energies down to the fully ionised ion; if the
                           user wishes to exclude some inner shell ionisation
                           for some reason they need to give this a very large
                           number. Note the ionisation model assumes that the
                           outermost electron ionises first always, and that
                           the orbitals are filled assuming ground state.

     electron_species - Name of the electron species. This can be specified as
                        an array in the event that the user wishes some levels
                        to have a different electron species which can be
                        handy for monitoring ionisation at specific levels.

 * Added Holger's CPML boundary conditions.
   This implementation closely follows that outlined in the book
   "Computational Electrodynamics. The Finite-Difference Time-Domain
   Method.", A. Taflove and S. Hagness (2005).
   See also J. A. Roden and S. D. Gedney, "Convolutional PML (CPML):
   an efficient FDTD implementation of the CFS-PML for arbitrary
   media", Microwave Optical Technol. Lett., vol. 27, 2000.

   CPML boundaries are specified in the input deck by specifying
   either "cpml_outflow" or "cpml_laser" in the boundaries block.
   There are also four configurable parameters.
   "cpml_thickness" is the thickness of the CPML boundary.
   "cpml_kappa_max", "cpml_a_max" and "cpml_sigma_max" are tunable
   parameters which affect the behaviour of the absorbing media.
   See the above references for details.

   eg.

   begin:boundaries
     cpml_thickness = 16
     cpml_kappa_max = 20
     cpml_a_max = 0.2
     cpml_sigma_max = 0.7
     bc_x_min = cpml_laser
     bc_x_max = cpml_outflow
     bc_y_min = cpml_outflow
     bc_y_max = cpml_outflow
   end:boundaries

 * Added continuation lines to the input deck.
   If the input deck contains a '\' character then the rest of
   the line is ignored and the next line becomes a continuation
   of the current one.

 * Added "dump_first" logical flag to the output block.
   Set "dump_first=F" to prevent EPOCH from generating an
   output dump immediately after initialising the simulation.
   The default value is "F".

 * Added "dump_last" logical flag to the output block.
   Set "dump_last=F" to prevent EPOCH from generating an
   output dump just before exiting. The default value is "T"
   if an output block exists in the input deck and "F" otherwise.

 * Added "force_first_to_be_restartable" flag.
   This is a logical flag which can be added to an "output"
   block to determine whether or not the first output dump
   should be a restart dump. The default value is "F".

 * Implemented the "ejected_particles" output parameter.
   If the "ejected_particles" variable is requested in the
   output block then all the particles which have left the
   simulation domain are written to file.
   The parameter is assigned a dumpmask in the same way as
   other variables in the output block.
   Once the data has been written, the ejected particle lists
   are reset and will accumulate particles until the next
   requested output dump.

 * Added global particle IDs.
   Particle IDs are useful if you want to track the progress
   of each particle throughout the simulation. Since they increase
   the size of each particle data structure, they are disabled by
   default and must be enabled using a compiler flag.
   The PARTICLE_ID flag will use an 8-byte integer to represent the
   ID and PARTICLE_ID4 uses a 4-byte integer.
   They are written to file using the "id" flag.
   Eg.
     particles = always
     id = always

   in the "output" block will write particle IDs to file.

   Note: In the current implementation, the particle IDs are
   passed between processors and written to file using REAL numbers.
   This means that in double precision the maximum particle ID
   is 2^53 ~ 10^16. This should be ample for the forseeable future.
   However, if the code is compiled for single precision then the
   maximum ID is 2^24 = 16777216. Probably not big enough.

 * Added a 'subset' block for specifying a subset of particles.
   This adds a new block which can be used to pick a subset of
   particles based on given criteria.
   The subset name can then be used in place of (or in addition to)
   the dumpmask in an 'output' block.

   For example:

   begin:subset
     name = background
     random_fraction = 0.1
     include_species:electron
     include_species:proton
   end:subset

   begin:subset
     name = high_gamma
     gamma_min = 1.3
     include_species:electron
   end:subset

   begin:output
     particles = background + high_gamma + always
     px = background + high_gamma
     py = background
     pz = always
   end:output

   In this example, three 'px' blocks will be written:
   'Particles/background/electron/Px', 'Particles/background/proton/Px'
   and 'Particles/high_gamma/electron/Px'.
   The 'background' blocks will contain 10% of the each species,
   randomly selected.
   The 'high_gamma' block will contain all the electrons with a gamma
   greater than 1.3.
   There will also be 'Particles/background/electron/Py' and
   'Particles/background/proton/Py' block containing y-momentum for the same
   10% random subset of particles.
   Finally, the 'Particles/All/electron/Pz' and 'Particles/All/proton/Pz' will
   contain the z-momentum for all particles.

   The following restrictions can be specified in a 'subset' block:
   random_fraction, {px,py,pz,weight,charge,mass,gamma}_{min,max},
   x_{min,max}, y_{min,max} (2d), z_{min,max} (2d & 3d), dumpmask,
   include_species.

 * Added subset restrictions for particle IDs.
   A range of particle IDs to dump can be specified in the "subset" block
   using "id_min" and "id_max"

 * Added single-precision output for EPOCH.
   This adds a new 'single' field to the dumpmask, allowing
   output variables to be converted to single precision when being
   dumped to file. This is specified on a per-variable basis.

   eg.
   begin:output
     dt_snapshot = 8 * femto

     grid = always
     ex = always
     ey = always + single
   end:output

   In this example, the grid variable 'ex' will be written as a
   double precision array and 'ey' will be converted to single
   precision.

 * Allow averages to be stored in single precision.
   If the 'average_single' dumpmask is supplied to a variable
   then the averaged data will be stored in a single precision
   array throughout the simulation.

 * Enable multiple "output" blocks in the input deck.
   It is now possible to have multiple output blocks, each
   with their own "dt_snapshot" or "nstep_snapshot" and their
   own set of output variables.
   The syntax remains the same as before with the addition of
   "name" and "restartable" fields.
   The "name" field specifies the file name to use for the output
   list. Each time EPOCH generates an output dump, it writes an
   entry into the file "<name>.visit". This can be used to find
   all the output dumps of a specific output block.
   The "restartable" field specifies that the output block should
   generate ouput dumps containing all the information necessary
   to restart a simulation.

 * Added "npart_per_cell" to species blocks.
   This patch adds the ability to specify the number of particles
   per cell to use for the initial particle loading.
   In the current implementation, "npart_per_cell" is a simple
   integer constant. At a later stage this will be extended to
   allow "npart_per_cell" to be a spatially varying function.

   If per-species weighting is used then the value of
   "npart_per_cell" will be the average number of particles per
   cell.  If "npart" or "frac" have also been specified for a species,
   then they will be ignored.

   To avoid confusion, there is no globally used "npart_per_species".
   If you want to have a single value to change in the input deck
   then this can be achieved using a constant block.

 * Added thermal boundaries

 * Ramped density in moving windows.
   When the moving window is active, particles are injected into the
   right-hand side of the domain as the domain moves to the left.
   The density of the particle species being injected may now be a function
   of space and time. The particles will adhere to this functional form.

 * Improve MPI performance for particle redistribution.
   Sending and receiving is now performed using red-black processor
   ordering which is significantly faster.

 * Don't write to disk in the load balancing routine.
   The previous load balancer would write the field variables
   to a file so that each processor can read back its new
   domain. With this patch, the same functionality is obtained
   using MPI calls. This will significantly increase performance.

 * Added per-species and per-subset current diagnostic.

 * Added distribution functions for the angle of particle momentum.
   This adds the flags "dir_xy_angle", "dir_yz_angle" and "dir_zx_angle"
   to the "dist_fn" block. These calculate the distribution of particle
   momentum directions in the X-Y, Y-Z and Z-X planes.

 * Added laser absorption diagnostic.
   This adds a variable named "absorption" to the list of variables that
   can be dumped to file. It accepts a dumpmask in the same manner as other
   output variables. When selected, two numbers will be calculated and
   written to file:
     'Absorption/Laser_enTotal' - The total amount of energy injected into
                                  the simulation by laser boundaries.
     'Absorption/Abs_frac' - The fraction of this laser energy being absorbed
                             by the open boundaries.

 * Added particle prefetching
   Use Intel-specific 'mm_prefetch' calls to load next particle in the list
   into cache ahead of time.
   Enabled using the "-DPREFETCH" compiler flag.

 * Added user-defined delay on particle push.
   This adds the parameter "particle_tstart" to the "control" block which
   specifies the time at which to start pushing particles.

 * Added particle migration between species based on energy.
   This adds two new parameters to the "control" block:

     use_migration - Logical flag which determines whether or not to use
                     particle migration. The default is "F".

     migration_interval - The number of timesteps between each migration event.
                          The default is 1 (migrate at every timestep).

   The following parameters are added to the "species" block:

     migrate - Logical flag which determines whether or not to consider this
               species for migration. The default is "F".

     promote_to - The name of the species to promote particles to.

     demote_to - The name of the species to demote particles to.

     promote_multiplier - The particle is promoted when its energy is greater
                          than "promote_multiplier" times the local average.
                          The default value is 1.

     demote_multiplier  - The particle is demoted when its energy is less
                          than "demote_multiplier" times the local average.
                          The default value is 1.

     promote_density - The particle is only considered for promotion when
                       the local density is less than "promote_density".
                       The default value is HUGE.

     demote_density  - The particle is only considered for demotion when
                       the local density is greater than "demote_density".
                       The default value is 0.

 * Added default compiler flags.

 * Added "milli" to "atto" constants to the maths parser.

 * Added NO_IO pre-processor directive.
   This compiles the code so that no disk I/O is performed.
   Useful for benchmarking.

 * Variable listings in IDL have been moved to a separate routine.
   Instead of the command "data=getdata(0,wkdir='Data',/variables)" you
   should now use:
     list_variables,0,'Data'

 * The global variable "wkdir_global" has been removed from the IDL interface.
   To set the default value for "wkdir" you must now use the command
   "set_wkdir, wkdir". To view the currently set default value, use the
   command "print,get_wkdir()".

 * Added IDL widgets for interactively exploring SDF files.
   Data can now be loaded via a GUI interface using the command:
     data=explore_data('Data',snapshot=5)
   First parameter is optional data directory

   Simple plots can be viewed using the command:
     quick_view,'Data',snapshot=5
   The first parameter is optional data directory

 * Multiple improvements to SDF C-library routines.

 * Added basic python reader for SDF files.

 * Split the grid in a more optimal way.

 * Removed SPLIT_PARTICLES_AFTER_PUSH directive

 * Added command-line arguments to sdf2ascii

 * Added error handling to SDF files.

Bugfixes:

 * Fix for particle load and derived data calculation

 * Fix dump times

 * Corrected "intensity_w_cm2" conversion factor.

 * Fixed bugs in the load balancer.

 * Fix parsing of input decks with no newline at the end.

 * Changed "gen_src_module" to print less errors.

 * Only regenerate embedded code when source code has changed.

 * Fixed some issues building the embedded source module.

 * Fixes for restarting from snapshots.

 * Fixed enforcement of the "density_max" restriction.

 * Enforce positive mass for particle species.

 * Various fixes for the VisIt reader plugin.

 * Write the correct units in output dumps.

 * Fixes for VisIt build script.

 * Improved portability of VisIt build script.

 * Modify CFL condition for high order field solvers.

 * Output Poynting flux when there are no particles.

 * Don't write particle variables when there are no particles.

 * Fixed calculation of dist_fns for parallel runs.
   The spatial ranges for distribution functions was incorrectly
   calculated, leaving gaps between grids when run in parallel.

 * Fix timestep when restarting.
   The value for "dt_plasma_frequency" is calculated using the
   initial conditions which are never used when restarting.
   To fix this, restart dumps now contain the value of
   "dt_plasma_frequency".

 * Fixed zero-gradient boundary conditions.

 * Output dump files using both nstep_snapshot and dt_snapshot.

 * Only require "dt_snapshot" or "nstep_snapshot"
   The deck parsing routines were mistakenly requiring both
   "dt_snapshot" and "nstep_snapshot" to be specified. Only
   one of the two is required.

 * Only require "dt_average" or "nstep_average"
   The deck parsing routines were mistakenly requiring both
   "dt_average" and "nstep_average" to be specified. Only
   one of the two is required.

 * Adjust averaging for "nsteps" less than "dt_snapshot".
   Averaging failed to work if "nsteps" was specified
   such that the job completed before the first proper output
   dump. This code now adjusts the time at which averaging begins
   accumulating data.

 * Fix boundary conditions on moving windows.
   Fixed the bug reported by Jurgen Boker in the CCPForge
   help forum on 31/01/2012.

 * Added equilibrium fields to bc calculations.
   This fixes outflow and laser conditions when there is a background field.

 * Allow missing particle species in restart dumps.

 * Added missing nint,floor,ceil input deck functions.

 * Always allocate the number of particles specified.
   Before this patch, the code would round to the nearest number
   of particles on each process. In cases where there was less than
   one particle per process, no particles would be assigned.
   In the case of tracer particles and a large number of processors,
   it is not unreasonable to want less than one particle per
   processor.

 * Improved loading of particles for moving window.
   The code now uses a real value for the species' npart_per_cell.
   This allows the injected particle population to match the
   one used in the initial conditions when there is not a fixed
   number of particles per cell.

 * Check for input deck strings which are too long.
   The code now checks to see if an input deck string is too
   long for the parser to handle and issues an error message
   which explains how to fix it.

 * Truncate strings which are too long for SDF.

 * Various fixes for the python SDF reader.
   Dictionary keys now use the name field instead of the ID,
   making them behave more like the VisIt reader.
   Useful fields from the header are now added to the dictionary.
   File is closed and memory deallocated on object destruction.

 * Avoid divide-by-zero in particle loading routine.

 * Corrected the degrees of freedom for temperature calculation.

 * Allow dumping of tracer particles for derived variables.
   With this change, tracer particles are ignored when summing
   over all particle species but not ignored when doing per-species
   output. If the user wants to ignore tracer particles for
   per-species output, this can be achieved using the dumpmask for
   that species.

 * Use more consistent naming for variables in dumps.

 * Don't prepend "derived_" tags derived data.

 * Fixes for outflow boundary conditions.

 * Ensure that CPU splits are the same for all variables.
   This fixes the "striping" bug when running VisIt in parallel.

 * Updated constants with current values from NIST.

 * Fixed potential issues with IDL keyword inheritance.

 * Use consistent tag naming in SDF IDL reader.

 * Added condition to catch potential divide by zero in data averaging.

 * Fix current deposition bug for high order splines.
   Since the particle push advances particles one and a half
   timesteps whilst calculating current, it is sometimes necessary
   to use a larger current array during this calculation.

 * Fix 1D VisIt scatter plots.

 * Fixed an issue with the deck parser.
   When converting from an ASCII string to a numeric value, some
   compilers will translate any occurrence of "t" or "f" into
   true or false. This patch explicitly checks that the string is
   a number before trying to convert it.

 * Perform sanity checks on particle boundary conditions.

 * Various other tidying and bugfixing

23-06-2011 Changes for version 3.1

Syntax changes:

 * Added synonyms for averaging block parameters.
   Two new names have been added to improve consistency with
   the rest of the output block.
   "dt_average" can be used in place of "averaging_period".
   "nstep_average" can be used in place of "min_cycles_per_average".

 * Added "intensity" synonym for "irradiance".
   Also added missing *_w_cm2 specifiers for both.

 * Use "dumpmask" for probes and particle species.
   Changed the input deck syntax to be consistent with other
   output blocks. "dumpmask" has the same meaning for probes and
   species as it does for distribution functions and output blocks.

 * Implemented "no_sum" dumpmask parameter.
   By default derived particle variables are summed over all
   species. If the "species" dumpmask parameter is given then
   output is also generated on a per-species basis.
   Adding "no_sum" to the dumpmask prevents the output
   of the variable summed over all species.

Additions and changes:

 * Added current smoothing routine to 1d and 3d versions.

 * Issue a warning, not an error on dist_fn range.
   In dist_fn blocks the range for spatial coordinates is never
   used. Therefore the deck parser may as well allow the entry to
   have invalid values.

 * Tidied up example_decks and added new ones.

 * Issue a warning when deck constants conflict with built-in ones.

 * Changes to the behaviour of data averaging.
   If "dt_average" is longer than "dt_snapshot" then dt_average
   will be set equal to dt_snapshot rather than vice-versa.
   Also, if the timestep is too large to satisfy "nstep_average"
   then a warning will be printed rather than adjusting the timestep.

 * Removed the normalised grids from dist_fn output.

 * Added labels and units to dist_fn output.
   Also added support for units in the VisIt plugin.

 * Updated IDL reader to handle labels correctly.

 * Detect file endianness in the IDL reader.

 * Updated the load balancing routine.
   This change takes into account the workload of the field solver
   as well as the particle push. It also does a slightly better job
   of dividing the work amongst processors.
   Will hopefully prove a little more robust.

 * Print a helpful message for deprecated deck strings.

 * Simplified deck parsing process.
   The input deck is now only parsed twice. The first time
   it is called with deck_state set to "c_ds_first" and this pass
   deals with anything that does not require pre-allocated memory.
   On the second pass, deck_state is set to "c_ds_last" and this
   deals with entries that could not be parsed in the first sweep.

 * More particle push optimisations.

 * Added particle heat flux and Poynting flux diagnostics

 * Output a list of each type of output dump for VisIt.
   The VisIt visualisation tool will accept a list of files
   which belong together and make these available for plotting.
   Since "normal", "full" and "restart" dumps each contain different
   data, it is useful to have a list for each type.
   This may also be useful for the other plotting libraries in future.

Bugfixes:

 * Fixed typo in cone.deck examples.

 * Fixed serious bug in particle loading routines.
   A typo in the routine for testing valid cells meant that no
   particles would get loaded.

 * Fixed bug in maths parser for minus signs.
   Deck constants are now identified using a new block type
   constant "c_pt_deck_constant". This needs to be checked for
   when deciding whether a minus sign is a unary or binary minus.

 * Fixed a typo in the random number generator.

 * Don't deallocate initial conditions until after manual_load.

 * Use thermal particles in the "ramp.deck" example.

 * Fix for calculating gamma-1 in dist_fn routines.

 * Bugfixes for the MatLab reader.
   There was a bug in setting up grid variables in MatLab which
   has now been fixed.
   It has also been changed to reduce the amount of output it
   produces.

 * Fixed typo in the restart dump reading routines.

 * Use negative values to test for output.
   The previous version uses HUGE() values for dt_snapshot and
   nstep_snapshot by default. This can lead to overflow.

 * Ignore cells of zero density in the autoloader.

 * Fix long integer definitions in the maths parser.

 * Start accumulating averaged variables at the correct time.
   Since an output file can now be triggered by either "dt_snapshot"
   or "nstep_snapshot", we need to test which one is due to occur
   next and start accumulating an average in time for this.

 * Make particle probes directional.
   This change fixes particle probes so that they only track
   particles which cross the plane in the direction corresponding
   to the normal direction.

 * Change default kinetic energy limits for probes.
   Particle probes only track particles whose kinetic energy
   falls within the specified range ek_min to ek_max. This fix
   changes the default such that particles of any energy are tracked.

 * Various other tidying and bugfixing

25-02-2011 Changes for version 3.0

Syntax changes:

 * Added "eps0", "epsilon0" and "mu0" constants. These can now be used in
   place of "epsilonnaught", etc.

 * Renamed "freq" to "omega". Added "lambda".
   Renamed both the input deck parameter and the name used in the
   deck. Print a warning if "freq" is used in the deck.
   Added "frequency" for specifying non-angular frequency.
   Added "lambda" for specifying the laser wavelength in a vacuum.

 * Made particle probe parameters consistent.
   Previous versions had differing ways of specifying probes in
   the input deck for each of epoch{1,2,3}d. They also had different
   implementations in the code for testing if a particle had crossed
   a probe.
   They are now consistent. They are all specified using
   a point in the plane and the normal vector to the plane. Particles
   are recorded if they cross the plane in the direction of the normal
   vector.
   The points and normals are given using the following syntax:
     point = (1,2.5,3)
     normal = (0.5,1,0)

   In 1d, both the above and scalar form are accepted:
     point = 2.5
     normal = 1

 * Renamed "rho", "minrho", etc. to "density", "density_min", etc.

 * There is now no distinction between the "constant" block and the "deo"
   block. The "deo" block is now deprecated and will be removed at some
   point.

 * Removed the (currently unused) neutral_background option.

Syntax additions:

 * Added "supergauss" function to the maths parser.
   This is identical to the existing "gauss" function except that
   it accepts a fourth parameter which is the power to raise the
   argument to.

 * Added "profile" to epoch1d lasers in the deck for consistency.

 * Added temp_{x,y,z}_ev for specifying temperature in elecronvolts.

 * Added "micron" constant. This is to help readability of units given in
   microns. eg. "lambda = 1.06 * micron"

 * Added "nstep_snapshot" entry to the output block of input.decks
   This allows a user to specify the number of timesteps between
   output dumps as well as the simulation time between dumps.
   Both can be specified and they will both be tested for.
   Also made "dt_snapshot" an optional parameter.
   If "dt_snapshot" is not specified then it is not tested for.
   If "nstep_snapshot" is not specified then it is not tested for.

 * Added "dump_source_code" and "dump_input_decks" options.
   These are logical flags which control whether or not source code
   and input decks are written to restart dumps.

Additions and changes:

 * Improved initial particle loading algorithm.
   There are difficulties in smoothly assigning particle weights when
   using per-particle weights and the density profile is discontinuous.
   To fix this isssue the weight assignments in vacuum cells are now
   reflected back into the non-vacuum area.

 * Write per-species particle data

 * Dump output to the new SDF format.

 * Added SDF VisIt, IDL and MatLab readers.

 * Use a less memory-hungry stack implementation.

 * Adjusted polarization angle and defaults for lasers.
   The polarization angle for a laser is now measured in a systematic
   way with respect to the right-hand triad of propagation direction,
   electric and magnetic fields. The previous version was somewhat random.
   If the laser is on x_min then the default E field is in the y-direction
   and the B field is the z-direction. The polarization angle is measured
   clockwise about the x-axis with zero along the y-axis.
   Similarly, for propagation directions:
    y_min: angle about y-axis, zero along z-axis
    z_min: angle about z-axis, zero along x-axis
    x_max: angle anti-clockwise about x-axis, zero along y-axis
    y_max: angle anti-clockwise about y-axis, zero along z-axis
    z_max: angle anti-clockwise about z-axis, zero along x-axis

   Also set new default values for lasers. The default end time is t_end
   and the default profile is 1.0.

 * Moved unnecessary files out of epochXd directories.
   Also added the missing "include" directory to the source code
   which gets packed by gen_src_module.

 * Added comments to the Makefile

 * Check that laser frequency and amplitude have been specified.

 * Allow the code to still run if npart equals zero.

 * Improved consistency of warning messages.

 * Added constants for status file unit numbers.

 * Only write deck parser diagnostics to one file.

 * Only report missing options if they have been requested.

 * Added a globally shared seed number for random number generation.

 * Replaced random number generator with a better algorithm.

 * Added default values for "nsteps", "t_end" and "dt_multiplier".

 * Normalise particle momentum before doing the push.
   This increases the accuracy of calculations and allows the code to
   run in single precision.

 * Various bugfixes

28-09-2010 Changes for version 2.3

 * Added optional "use_random_seed" flag.
   If this boolean flag is set to true in the control block of the
   input deck then the pseudorandom number generation used for
   particle placement will be seed using the system time. Otherwise
   a predefined seed will be used, ensuring that results are exactly
   reproducible.

 * Allow the code to run with no particle species.

 * Updated VisIt reader for VisIt 2.x

 * Define x_min, x_max, etc. at grid boundaries.
   The old version defined these values at cell centres which
   meant that the domain ran from x_min-dx/2 to x_max+dx/2.
   For most users this is unexpected behaviour.
   The current fix also allows the code to run when nx=1.

 * Made more input deck elements optional.

 * Fix bug in creation of 1D MPI subtypes.
   This is actually a bug in the OpenMPI romio implementation. It
   was fixed in OpenMPI v1.4.2. This change is a work around for
   the older versions.

 * Fixed moving window bugs.

 * Changed the random number generation algorithm.

 * Fixed temperature diagnostics

 * Fixed particle probe output.
   This was broken as a result of the file locking patch.

 * Added perfectly conducting boundaries.
   These are specified using "bc_x_min=conduct" in the input deck.
   They set the E-parallel and B-perpendicular to zero and the
   gradient of B-parallel to zero in the perpendicular direction.
   Particles reflect off the boundary.

 * Changed the CFD routines to make them easier to use in other codebases.

 * Added CFD reader for Matlab.

13-08-2010 Changes for version 2.2

 * The fields_external and species_external blocks have been removed.
   This functionality is now obtained by passing the external filename
   in single or double quotes. eg:

     rho='rhodata.dat'

   will load rho from the external file named 'rhodata.dat'.

 * The input deck has been changed to handle one species per block.
   The old species, speciesn and species_externaln blocks have been removed.

   Introduced new species block. One species block for each species
   containing both basic properties and initial conditions. Example:

   begin:species

     charge=0.0
     mass=1836.2 * 4
     frac=1.0
     name=helium
     dump=T

     rho=if(x gt 0.5e-5 and x lt 2.5e-5,den_min*exp((x-0.5e-5)/scale),rho(helium))
     rho=if(x gt 2.5e-5, den_max, rho(helium))
     rho=if(x lt 0.5e-5, 0.0, rho(helium))
     rho_min=den_min
     temp=0

   end:species

   Note that previously defined species properties such as "rho" can now be
   referred to using the species name.

   Syntax for new species block is combined mixture of syntax for old species
   block (without the affixed species numbers) and syntax for old speciesn
   blocks.  If you need to go back and modify a species after creation
   (initial conditions changes etc) then you can specify a new species block
   with the same name.
   For example:

   begin:species

     name=helium
     rho=rho(helium) * 10.0

   end:species

   This will modify the "helium" species, leaving all species unchanged except
   for "rho" which is made ten times bigger.

   species_externaln blocks have been eliminated. To specify a property to be
   initialised by the values in an external file you now just give the filename
   in quotes. For example:

   begin:species

     name=helium
     rho='data.dat'

   end:species

   Species used for calculating distribution function output diagnostics are
   now specified by name rather than number. For example:

   begin:dist_fn

     include_species:helium

   end:dist_fn

   Changed the deck parser to allow names with trailing numbers.

 * Allow separate particle and field boundary conditions.
   These are specified using "bc_x_min_field", "bc_x_min_particle", etc.

 * Added "reflect" and "open" boundary conditions to input deck

 * Added "gamma" to the distribution functions.

 * Allow the writing of timestep info to stdout.
   This is enabled by specifying "stdout_frequency" in the input deck
   control block. The info is written after every "stdout_frequency" number
   of timesteps.

 * Added log functions to the maths parser.
   "loge" and "log10" take one argument and give the natural log and base10
   log, respectively. "log_base" takes two arguments, the second being the
   base to use for the logarithm.

 * Added nprocx/y/z parameters to the input deck. These specify the number
   of processors to use in the x/y/z directions.

 * The example input.deck has been moved to the example_decks directory.

 * The timestep data is now written to the CFD file header rather than
   its own separate block. If you have a custom reader then you will need
   to modify it to account for the change.
   All users will need to recompile the VisIt reader plugin.

 * Removed 'nfs:' from filenames. This allows EPOCH to work on a wider range
   of filesystems.

 * Removed partial writes in output_particle routines.
   This avoids file locking which in turn fixes I/O on
   most Lustre filesystems.

 * Fixed coefficients for 6th order field derivatives.

 * Fixed particle weight coefficients.

 * Fix initial temperature distribution calculation.

 * Fixed laser boundary conditions.

 * Clamp currents to zero whenever E field is clamped.

 * Don't load particles into ghost cells.

 * Fixes to correctly restart from restart dumps.

 * Fix compilation with older versions of gfortran.

 * Fixed bug when writing arrays larger than 2GB.

 * Added current to the restart dumps.

 * Write all particle species into restart dumps and not only those which
   have been asked for.

 * Only write warning messages on rank 0

 * Fixed some non-standard F90

 * Various minor bugfixes

 * More small optimisations to particle push.

 * Made 1d,2d and 3d versions more consistent.

 * Added top-hat particle weighting. Not fully tested.

 * Allow grids which cannot be exactly divided across processes.


16-04-2010 Changes for version 2.1

 * Various minor bug fixes.

 * VisIt reader changes.
   Read endianness and other new CFD header items.
   Improve startup speed.
   Added more debug info.

 * Fix bugs in the particle push discovered with the two-stream instability
   problem.

 * Fix compilation when PER_PARTICLE_WEIGHT is not used.

 * Added pol_angle for specifying polarisation angle in radians.

 * Use the names "x_min", "x_max", etc. instead of "left", "right"

 * Made the building of encoded_source slightly more robust.

 * Fixed up the encoded_source routines to comply with Fortran90's limit of
   39 continuation lines.

 * Dump files at end of timestep.
