23-06-2011 Changes for version 3.1

Syntax changes:

 * Added synonyms for averaging block parameters.
   Two new names have been added to improve consistency with
   the rest of the output block.
   "dt_average" can be used in place of "averaging_period".
   "nstep_average" can be used in place of "min_cycles_per_average".

 * Added "intensity" synonym for "irradiance".
   Also added missing *_w_cm2 specifiers for both.

 * Use "dumpmask" for probes and particle species.
   Changed the input deck syntax to be consistent with other
   output blocks. "dumpmask" has the same meaning for probes and
   species as it does for distribution functions and output blocks.

 * Implemented "no_sum" dumpmask parameter.
   By default derived particle variables are summed over all
   species. If the "species" dumpmask parameter is given then
   output is also generated on a per-species basis.
   Adding "no_sum" to the dumpmask prevents the output
   of the variable summed over all species.

Additions and changes:

 * Added current smoothing routine to 1d and 3d versions.

 * Issue a warning, not an error on dist_fn range.
   In dist_fn blocks the range for spatial coordinates is never
   used. Therefore the deck parser may as well allow the entry to
   have invalid values.

 * Tidied up example_decks and added new ones.

 * Issue a warning when deck constants conflict with built-in ones.

 * Changes to the behaviour of data averaging.
   If "dt_average" is longer than "dt_snapshot" then dt_average
   will be set equal to dt_snapshot rather than vice-versa.
   Also, if the timestep is too large to satisfy "nstep_average"
   then a warning will be printed rather than adjusting the timestep.

 * Removed the normalised grids from dist_fn output.

 * Added labels and units to dist_fn output.
   Also added support for units in the VisIt plugin.

 * Updated IDL reader to handle labels correctly.

 * Detect file endianness in the IDL reader.

 * Updated the load balancing routine.
   This change takes into account the workload of the field solver
   as well as the particle push. It also does a slightly better job
   of dividing the work amongst processors.
   Will hopefully prove a little more robust.

 * Print a helpful message for deprecated deck strings.

 * Simplified deck parsing process.
   The input deck is now only parsed twice. The first time
   it is called with deck_state set to "c_ds_first" and this pass
   deals with anything that does not require pre-allocated memory.
   On the second pass, deck_state is set to "c_ds_last" and this
   deals with entries that could not be parsed in the first sweep.

 * More particle push optimisations.

 * Added particle heat flux and Poynting flux diagnostics

 * Output a list of each type of output dump for VisIt.
   The VisIt visualisation tool will accept a list of files
   which belong together and make these available for plotting.
   Since "normal", "full" and "restart" dumps each contain different
   data, it is useful to have a list for each type.
   This may also be useful for the other plotting libraries in future.

Bugfixes:

 * Fixed typo in cone.deck examples.

 * Fixed serious bug in particle loading routines.
   A typo in the routine for testing valid cells meant that no
   particles would get loaded.

 * Fixed bug in maths parser for minus signs.
   Deck constants are now identified using a new block type
   constant "c_pt_deck_constant". This needs to be checked for
   when deciding whether a minus sign is a unary or binary minus.

 * Fixed a typo in the random number generator.

 * Don't deallocate initial conditions until after manual_load.

 * Use thermal particles in the "ramp.deck" example.

 * Fix for calculating gamma-1 in dist_fn routines.

 * Bugfixes for the MatLab reader.
   There was a bug in setting up grid variables in MatLab which
   has now been fixed.
   It has also been changed to reduce the amount of output it
   produces.

 * Fixed typo in the restart dump reading routines.

 * Use negative values to test for output.
   The previous version uses HUGE() values for dt_snapshot and
   nstep_snapshot by default. This can lead to overflow.

 * Ignore cells of zero density in the autoloader.

 * Fix long integer definitions in the maths parser.

 * Start accumulating averaged variables at the correct time.
   Since an output file can now be triggered by either "dt_snapshot"
   or "nstep_snapshot", we need to test which one is due to occur
   next and start accumulating an average in time for this.

 * Make particle probes directional.
   This change fixes particle probes so that they only track
   particles which cross the plane in the direction corresponding
   to the normal direction.

 * Change default kinetic energy limits for probes.
   Particle probes only track particles whose kinetic energy
   falls within the specified range ek_min to ek_max. This fix
   changes the default such that particles of any energy are tracked.

 * Various other tidying and bugfixing

25-02-2011 Changes for version 3.0

Syntax changes:

 * Added "eps0", "epsilon0" and "mu0" constants. These can now be used in
   place of "epsilonnaught", etc.

 * Renamed "freq" to "omega". Added "lambda".
   Renamed both the input deck parameter and the name used in the
   deck. Print a warning if "freq" is used in the deck.
   Added "frequency" for specifying non-angular frequency.
   Added "lambda" for specifying the laser wavelength in a vacuum.

 * Made particle probe parameters consistent.
   Previous versions had differing ways of specifying probes in
   the input deck for each of epoch{1,2,3}d. They also had different
   implementations in the code for testing if a particle had crossed
   a probe.
   They are now consistent. They are all specified using
   a point in the plane and the normal vector to the plane. Particles
   are recorded if they cross the plane in the direction of the normal
   vector.
   The points and normals are given using the following syntax:
     point = (1,2.5,3)
     normal = (0.5,1,0)

   In 1d, both the above and scalar form are accepted:
     point = 2.5
     normal = 1

 * Renamed "rho", "minrho", etc. to "density", "density_min", etc.

 * There is now no distinction between the "constant" block and the "deo"
   block. The "deo" block is now deprecated and will be removed at some
   point.

 * Removed the (currently unused) neutral_background option.

Syntax additions:

 * Added "supergauss" function to the maths parser.
   This is identical to the existing "gauss" function except that
   it accepts a fourth parameter which is the power to raise the
   argument to.

 * Added "profile" to epoch1d lasers in the deck for consistency.

 * Added temp_{x,y,z}_ev for specifying temperature in elecronvolts.

 * Added "micron" constant. This is to help readability of units given in
   microns. eg. "lambda = 1.06 * micron"

 * Added "nstep_snapshot" entry to the output block of input.decks
   This allows a user to specify the number of timesteps between
   output dumps as well as the simulation time between dumps.
   Both can be specified and they will both be tested for.
   Also made "dt_snapshot" an optional parameter.
   If "dt_snapshot" is not specified then it is not tested for.
   If "nstep_snapshot" is not specified then it is not tested for.

 * Added "dump_source_code" and "dump_input_decks" options.
   These are logical flags which control whether or not source code
   and input decks are written to restart dumps.

Additions and changes:

 * Improved initial particle loading algorithm.
   There are difficulties in smoothly assigning particle weights when
   using per-particle weights and the density profile is discontinuous.
   To fix this isssue the weight assignments in vacuum cells are now
   reflected back into the non-vacuum area.

 * Write per-species particle data

 * Dump output to the new SDF format.

 * Added SDF VisIt, IDL and MatLab readers.

 * Use a less memory-hungry stack implementation.

 * Adjusted polarization angle and defaults for lasers.
   The polarization angle for a laser is now measured in a systematic
   way with respect to the right-hand triad of propagation direction,
   electric and magnetic fields. The previous version was somewhat random.
   If the laser is on x_min then the default E field is in the y-direction
   and the B field is the z-direction. The polarization angle is measured
   clockwise about the x-axis with zero along the y-axis.
   Similarly, for propagation directions:
    y_min: angle about y-axis, zero along z-axis
    z_min: angle about z-axis, zero along x-axis
    x_max: angle anti-clockwise about x-axis, zero along y-axis
    y_max: angle anti-clockwise about y-axis, zero along z-axis
    z_max: angle anti-clockwise about z-axis, zero along x-axis

   Also set new default values for lasers. The default end time is t_end
   and the default profile is 1.0.

 * Moved unnecessary files out of epochXd directories.
   Also added the missing "include" directory to the source code
   which gets packed by gen_src_module.

 * Added comments to the Makefile

 * Check that laser frequency and amplitude have been specified.

 * Allow the code to still run if npart equals zero.

 * Improved consistency of warning messages.

 * Added constants for status file unit numbers.

 * Only write deck parser diagnostics to one file.

 * Only report missing options if they have been requested.

 * Added a globally shared seed number for random number generation.

 * Replaced random number generator with a better algorithm.

 * Added default values for "nsteps", "t_end" and "dt_multiplier".

 * Normalise particle momentum before doing the push.
   This increases the accuracy of calculations and allows the code to
   run in single precision.

 * Various bugfixes

28-09-2010 Changes for version 2.3

 * Added optional "use_random_seed" flag.
   If this boolean flag is set to true in the control block of the
   input deck then the pseudorandom number generation used for
   particle placement will be seed using the system time. Otherwise
   a predefined seed will be used, ensuring that results are exactly
   reproducible.

 * Allow the code to run with no particle species.

 * Updated VisIt reader for VisIt 2.x

 * Define x_min, x_max, etc. at grid boundaries.
   The old version defined these values at cell centres which
   meant that the domain ran from x_min-dx/2 to x_max+dx/2.
   For most users this is unexpected behaviour.
   The current fix also allows the code to run when nx=1.

 * Made more input deck elements optional.

 * Fix bug in creation of 1D MPI subtypes.
   This is actually a bug in the OpenMPI romio implementation. It
   was fixed in OpenMPI v1.4.2. This change is a work around for
   the older versions.

 * Fixed moving window bugs.

 * Changed the random number generation algorithm.

 * Fixed temperature diagnostics

 * Fixed particle probe output.
   This was broken as a result of the file locking patch.

 * Added perfectly conducting boundaries.
   These are specified using "bc_x_min=conduct" in the input deck.
   They set the E-parallel and B-perpendicular to zero and the
   gradient of B-parallel to zero in the perpendicular direction.
   Particles reflect off the boundary.

 * Changed the CFD routines to make them easier to use in other codebases.

 * Added CFD reader for Matlab.

13-08-2010 Changes for version 2.2

 * The fields_external and species_external blocks have been removed.
   This functionality is now obtained by passing the external filename
   in single or double quotes. eg:

     rho='rhodata.dat'

   will load rho from the external file named 'rhodata.dat'.

 * The input deck has been changed to handle one species per block.
   The old species, speciesn and species_externaln blocks have been removed.

   Introduced new species block. One species block for each species
   containing both basic properties and initial conditions. Example:

   begin:species

     charge=0.0
     mass=1836.2 * 4
     frac=1.0
     name=helium
     dump=T

     rho=if(x gt 0.5e-5 and x lt 2.5e-5,den_min*exp((x-0.5e-5)/scale),rho(helium))
     rho=if(x gt 2.5e-5, den_max, rho(helium))
     rho=if(x lt 0.5e-5, 0.0, rho(helium))
     rho_min=den_min
     temp=0

   end:species

   Note that previously defined species properties such as "rho" can now be
   referred to using the species name.

   Syntax for new species block is combined mixture of syntax for old species
   block (without the affixed species numbers) and syntax for old speciesn
   blocks.  If you need to go back and modify a species after creation
   (initial conditions changes etc) then you can specify a new species block
   with the same name.
   For example:

   begin:species

     name=helium
     rho=rho(helium) * 10.0

   end:species

   This will modify the "helium" species, leaving all species unchanged except
   for "rho" which is made ten times bigger.

   species_externaln blocks have been eliminated. To specify a property to be
   initialised by the values in an external file you now just give the filename
   in quotes. For example:

   begin:species

     name=helium
     rho='data.dat'

   end:species

   Species used for calculating distribution function output diagnostics are
   now specified by name rather than number. For example:

   begin:dist_fn

     include_species:helium

   end:dist_fn

   Changed the deck parser to allow names with trailing numbers.

 * Allow separate particle and field boundary conditions.
   These are specified using "bc_x_min_field", "bc_x_min_particle", etc.

 * Added "reflect" and "open" boundary conditions to input deck

 * Added "gamma" to the distribution functions.

 * Allow the writing of timestep info to stdout.
   This is enabled by specifying "stdout_frequency" in the input deck
   control block. The info is written after every "stdout_frequency" number
   of timesteps.

 * Added log functions to the maths parser.
   "loge" and "log10" take one argument and give the natural log and base10
   log, respectively. "log_base" takes two arguments, the second being the
   base to use for the logarithm.

 * Added nprocx/y/z parameters to the input deck. These specify the number
   of processors to use in the x/y/z directions.

 * The example input.deck has been moved to the example_decks directory.

 * The timestep data is now written to the CFD file header rather than
   its own separate block. If you have a custom reader then you will need
   to modify it to account for the change.
   All users will need to recompile the VisIt reader plugin.

 * Removed 'nfs:' from filenames. This allows EPOCH to work on a wider range
   of filesystems.

 * Removed partial writes in output_particle routines.
   This avoids file locking which in turn fixes I/O on
   most Lustre filesystems.

 * Fixed coefficients for 6th order field derivatives.

 * Fixed particle weight coefficients.

 * Fix initial temperature distribution calculation.

 * Fixed laser boundary conditions.

 * Clamp currents to zero whenever E field is clamped.

 * Don't load particles into ghost cells.

 * Fixes to correctly restart from restart dumps.

 * Fix compilation with older versions of gfortran.

 * Fixed bug when writing arrays larger than 2GB.

 * Added current to the restart dumps.

 * Write all particle species into restart dumps and not only those which
   have been asked for.

 * Only write warning messages on rank 0

 * Fixed some non-standard F90

 * Various minor bugfixes

 * More small optimisations to particle push.

 * Made 1d,2d and 3d versions more consistent.

 * Added top-hat particle weighting. Not fully tested.

 * Allow grids which cannot be exactly divided across processes.


16-04-2010 Changes for version 2.1

 * Various minor bug fixes.

 * VisIt reader changes.
   Read endianness and other new CFD header items.
   Improve startup speed.
   Added more debug info.

 * Fix bugs in the particle push discovered with the two-stream instability
   problem.

 * Fix compilation when PER_PARTICLE_WEIGHT is not used.

 * Added pol_angle for specifying polarisation angle in radians.

 * Use the names "x_min", "x_max", etc. instead of "left", "right"

 * Made the building of encoded_source slightly more robust.

 * Fixed up the encoded_source routines to comply with Fortran90's limit of
   39 continuation lines.

 * Dump files at end of timestep.

