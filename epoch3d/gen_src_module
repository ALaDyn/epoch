#! /bin/sh

file=$1
success=1

build_sha1=1
embed_source=1

shift

dir=`dirname $file`
tmp=$dir/tmp
tmp2=$dir/tmp2

[ -d $dir ] || mkdir $dir

if [ "$1"x = "opt_dont_build_sha1"x ]; then
  build_sha1=0
  shift
fi
if [ "$1"x = "opt_dont_build_embedded_source"x ]; then
  embed_source=0
  shift
fi

if [ $build_sha1 -eq 1 ]; then
  sha=`cat $* | shasum | cut -f1 -d' '`
  if [ "$sha"x = x ]; then
    echo shasum failed. Trying sha1sum.
    sha=`cat $* | sha1sum | cut -f1 -d' '`
  fi
  if [ "$sha"x = x ]; then
    echo WARNING: unable to create valid sha1
  fi
fi

rm -f $tmp $tmp2

nlines=0

if [ $embed_source -eq 1 ]; then
  tar czf $tmp $*
  if [ $? -eq 0 ]; then
    base64 $tmp > $tmp2
    if [ $? -ne 0 ]; then
      echo base64 failed. Trying mimencode.
      mimencode $tmp -o $tmp2
      if [ $? -ne 0 ]; then
        echo mimencode failed. Trying uuencode.
        uuencode -m $tmp epoch.tgz > $tmp2
        if [ $? -eq 0 ]; then
          n=`cat $tmp2 | wc -l`
          sed -n 2,$((n-1))p $tmp2 > $tmp
          mv $tmp $tmp2
        else
          false
        fi
        if [ $? -ne 0 ]; then
          echo uuencode failed. Trying perl.
          perl -MMIME::Base64 -0777 -ne \
            'print encode_base64($_)' < $tmp > $tmp2
        fi
      fi
    fi
    if [ $? -eq 0 ]; then
      nlines=`cat $tmp2 | wc -l`
      nlines=$((nlines-1))
      success=0
    fi
  fi
fi

cat > $file <<EOF
MODULE encoded_source

  IMPLICIT NONE

  CHARACTER(LEN=*), PARAMETER :: sha1sum = "$sha"

EOF


if [ $nlines -gt 0 ]; then
  echo "  CHARACTER(LEN=*), PARAMETER :: last_line = &" >> $file
  tail -n 1 $tmp2 | sed 's/^/      "/; s/$/"/' >> $file

cat >> $file <<EOF

  CHARACTER(LEN=76), DIMENSION($nlines) :: source_code

CONTAINS

  SUBROUTINE init_source_code()

EOF

IFS="
"
  i=1
  for ln in `head -n $nlines $tmp2`; do
    echo "    source_code($i) = \"$ln\"" >> $file
    i=$((i+1))
  done

cat >> $file <<EOF

  END SUBROUTINE init_source_code

END MODULE encoded_source
EOF

else
cat >> $file <<EOF
  CHARACTER(LEN=*), PARAMETER :: last_line = ""

  CHARACTER(LEN=76), DIMENSION($nlines) :: source_code

CONTAINS

  SUBROUTINE init_source_code()

  END SUBROUTINE init_source_code

END MODULE encoded_source
EOF
fi

rm -f $tmp $tmp2

if [ $success -ne 0 ]; then
  echo WARNING: failed to pack source code. Restart dumps will be produced without it.
fi
