#! /bin/sh

# Shell script for unpacking source code and input decks from a
# SDF restart dump

file=$1
dir=unpacked_source
output=$dir/epoch.tgz
tmp=$dir/.__TMP__

getint() {
    od -td4 -N4 -j$off $file | head -1 | awk '{print$2}'
}

getlong() {
    n1=`od -td4 -N4 -j$off $file | head -1 | awk '{print$2}'`
    n2=`od -td4 -N4 -j$((off+4)) $file | head -1 | awk '{print$2}'`
    echo $((n1 + n2 * 4294967296))
}

# Sanity checking

if [ "$1"x = x -o "$2"x != x ]; then
  echo "Usage: unpack_source_from_restart <restart_file>"
  exit 1
fi

if [ -e $output ]; then
  echo 'ERROR: output file "'$output'" already exists. Please remove first.'
  exit 1
fi

if [ ! -f $file ]; then
  echo 'ERROR: restart dump "'$file'" does not exist'
  exit 1
fi

str=`od -tc -N4 $file | head -1 | cut -c9- | tr -d ' '`

if [ "$str"x != "SDF1x" ]; then
  echo 'ERROR: "'$file'" is not a SDF file'
  exit 1
fi

# Read SDF header

off=8
version=$(getint); off=$((off+4))
revision=$(getint)
off=48; first_block_location=$(getlong)
off=68; nblocks=$(getint)
off=96; string_length=$(getint)

# Read the blocks

mkdir -p $dir

next_block=$first_block_location

i=0
found=0
while [ $i -lt $nblocks ]; do
  i=$((i+1))
  block_off=$next_block
  off=$block_off; next_block=$(getlong)
  off=$((block_off+8)); data_location=$(getlong)
  off=$((block_off+48)); data_length=$(getlong)
  off=$((block_off+56)); block_type=$(getint)

  # Only care about type_source blocks

  if [ $block_type -eq 8 ]; then
    rm -f $tmp
    off=$((block_off+68)) # block_name location
    dd if=$file of=$tmp bs=1 skip=$off count=$string_length > /dev/null 2>&1

    [ $? -ne 0 ] && continue

    # Is it an input deck?
    grep -abo Embedded_input_deck $tmp > /dev/null 2>&1

    if [ $? -eq 0 ]; then
      found=1
      off=$((block_off+16)) # block_id location
      dd if=$file of=$tmp bs=1 skip=$off count=32 > /dev/null 2>&1
      [ $? -ne 0 ] && continue

      f=`sed 's, *$,,' $tmp`
      d=`dirname $f`

      mkdir -p $dir/$d
      off=$data_location
      dd if=$file of=$dir/$f bs=1 skip=$off count=$data_length > /dev/null 2>&1
      if [ $? -ne 0 ]; then
        echo 'WARNING: failed to unpack input deck "'"$dir/$f"'"'
        continue
      fi
      echo 'Unpacked input deck into "'"$dir/$f"'"'
    else
    # Is it an embedded source code block?
      grep -abo base64_packed_source_code $tmp > /dev/null 2>&1

      [ $? -ne 0 ] && continue

      found=1
      off=$data_location
      dd if=$file of=$tmp bs=1 skip=$off count=$data_length > /dev/null 2>&1

      if [ $? -ne 0 ]; then
        echo 'WARNING: failed to unpack source code'
        continue
      fi

      which uudecode > /dev/null 2>&1
      if [ $? -eq 0 ]; then
        (echo begin-base64 664 $output
        fold $tmp
        echo
        echo ====) | uudecode -o $output
      else
        perl -MMIME::Base64 -0777 -ne \
            'print decode_base64($_)' < $tmp > $output
      fi

      if [ $? -ne 0 ]; then
        echo 'WARNING: failed to unpack source code'
        continue
      fi

      echo 'Unpacked source code into "'"$output"'"'
    fi
  fi
done

if [ $found -eq 0 ]; then
  echo 'WARNING: no embedded source code found in "'"$file"'".'
  echo 'Maybe it is not a restart dump?'
fi

rm -f $tmp
